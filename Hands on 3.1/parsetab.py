
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEDIVIDE EQUALS ID INT LBRACE LPAREN MINUS NUMBER PLUS RBRACE RETURN RPAREN SEMICOLON TIMESprogram : functionfunction : INT ID LPAREN RPAREN blockblock : LBRACE decls RBRACEdecls : decl decls\n| decldecl : INT ID EQUALS expr SEMICOLONdecl : RETURN expr SEMICOLONexpr : expr PLUS expr\n| expr MINUS expr\n| expr TIMES expr\n| expr DIVIDE exprexpr : LPAREN expr RPARENexpr : NUMBERexpr : ID'
    
_lr_action_items = {'INT':([0,8,10,21,33,],[3,11,11,-7,-6,]),'$end':([1,2,7,13,],[0,-1,-2,-3,]),'ID':([3,11,12,17,20,22,23,24,25,],[4,15,19,19,19,19,19,19,19,]),'LPAREN':([4,12,17,20,22,23,24,25,],[5,17,17,17,17,17,17,17,]),'RPAREN':([5,18,19,26,28,29,30,31,32,],[6,-13,-14,32,-8,-9,-10,-11,-12,]),'LBRACE':([6,],[8,]),'RETURN':([8,10,21,33,],[12,12,-7,-6,]),'RBRACE':([9,10,14,21,33,],[13,-5,-4,-7,-6,]),'NUMBER':([12,17,20,22,23,24,25,],[18,18,18,18,18,18,18,]),'EQUALS':([15,],[20,]),'SEMICOLON':([16,18,19,27,28,29,30,31,32,],[21,-13,-14,33,-8,-9,-10,-11,-12,]),'PLUS':([16,18,19,26,27,28,29,30,31,32,],[22,-13,-14,22,22,-8,-9,-10,-11,-12,]),'MINUS':([16,18,19,26,27,28,29,30,31,32,],[23,-13,-14,23,23,-8,-9,-10,-11,-12,]),'TIMES':([16,18,19,26,27,28,29,30,31,32,],[24,-13,-14,24,24,24,24,-10,-11,-12,]),'DIVIDE':([16,18,19,26,27,28,29,30,31,32,],[25,-13,-14,25,25,25,25,-10,-11,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function':([0,],[2,]),'block':([6,],[7,]),'decls':([8,10,],[9,14,]),'decl':([8,10,],[10,10,]),'expr':([12,17,20,22,23,24,25,],[16,26,27,28,29,30,31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function','program',1,'p_program','sintactico3_1.py',10),
  ('function -> INT ID LPAREN RPAREN block','function',5,'p_function','sintactico3_1.py',14),
  ('block -> LBRACE decls RBRACE','block',3,'p_block','sintactico3_1.py',18),
  ('decls -> decl decls','decls',2,'p_decls','sintactico3_1.py',22),
  ('decls -> decl','decls',1,'p_decls','sintactico3_1.py',23),
  ('decl -> INT ID EQUALS expr SEMICOLON','decl',5,'p_decl_variable','sintactico3_1.py',27),
  ('decl -> RETURN expr SEMICOLON','decl',3,'p_decl_return','sintactico3_1.py',31),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binop','sintactico3_1.py',35),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binop','sintactico3_1.py',36),
  ('expr -> expr TIMES expr','expr',3,'p_expr_binop','sintactico3_1.py',37),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_binop','sintactico3_1.py',38),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_group','sintactico3_1.py',46),
  ('expr -> NUMBER','expr',1,'p_expr_number','sintactico3_1.py',50),
  ('expr -> ID','expr',1,'p_expr_id','sintactico3_1.py',54),
]
